// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shell/shell.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_shell_2fshell_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shell_2fshell_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_shell_2fshell_2eproto;
namespace mavsdk {
namespace rpc {
namespace shell {
class ReceiveResponse;
struct ReceiveResponseDefaultTypeInternal;
extern ReceiveResponseDefaultTypeInternal _ReceiveResponse_default_instance_;
class SendRequest;
struct SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class SendResponse;
struct SendResponseDefaultTypeInternal;
extern SendResponseDefaultTypeInternal _SendResponse_default_instance_;
class ShellResult;
struct ShellResultDefaultTypeInternal;
extern ShellResultDefaultTypeInternal _ShellResult_default_instance_;
class SubscribeReceiveRequest;
struct SubscribeReceiveRequestDefaultTypeInternal;
extern SubscribeReceiveRequestDefaultTypeInternal _SubscribeReceiveRequest_default_instance_;
}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template <>
::mavsdk::rpc::shell::ReceiveResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::ReceiveResponse>(Arena*);
template <>
::mavsdk::rpc::shell::SendRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::SendRequest>(Arena*);
template <>
::mavsdk::rpc::shell::SendResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::SendResponse>(Arena*);
template <>
::mavsdk::rpc::shell::ShellResult* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::ShellResult>(Arena*);
template <>
::mavsdk::rpc::shell::SubscribeReceiveRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::SubscribeReceiveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mavsdk {
namespace rpc {
namespace shell {
enum ShellResult_Result : int {
  ShellResult_Result_RESULT_UNKNOWN = 0,
  ShellResult_Result_RESULT_SUCCESS = 1,
  ShellResult_Result_RESULT_NO_SYSTEM = 2,
  ShellResult_Result_RESULT_CONNECTION_ERROR = 3,
  ShellResult_Result_RESULT_NO_RESPONSE = 4,
  ShellResult_Result_RESULT_BUSY = 5,
  ShellResult_Result_ShellResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ShellResult_Result_ShellResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ShellResult_Result_IsValid(int value);
constexpr ShellResult_Result ShellResult_Result_Result_MIN = static_cast<ShellResult_Result>(0);
constexpr ShellResult_Result ShellResult_Result_Result_MAX = static_cast<ShellResult_Result>(5);
constexpr int ShellResult_Result_Result_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ShellResult_Result_descriptor();
template <typename T>
const std::string& ShellResult_Result_Name(T value) {
  static_assert(std::is_same<T, ShellResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return ShellResult_Result_Name(static_cast<ShellResult_Result>(value));
}
template <>
inline const std::string& ShellResult_Result_Name(ShellResult_Result value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ShellResult_Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ShellResult_Result_Parse(absl::string_view name, ShellResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShellResult_Result>(
      ShellResult_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.SendRequest) */ {
 public:
  inline SendRequest() : SendRequest(nullptr) {}
  ~SendRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendRequest(const SendRequest& from);
  SendRequest(SendRequest&& from) noexcept
    : SendRequest() {
    *this = ::std::move(from);
  }

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendRequest& a, SendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendRequest& from) {
    SendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.shell.SendRequest";
  }
  protected:
  explicit SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command() ;
  const std::string& command() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* ptr);

  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(
      const std::string& value);
  std::string* _internal_mutable_command();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.SendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shell_2fshell_2eproto;
};// -------------------------------------------------------------------

class SendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.SendResponse) */ {
 public:
  inline SendResponse() : SendResponse(nullptr) {}
  ~SendResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendResponse(const SendResponse& from);
  SendResponse(SendResponse&& from) noexcept
    : SendResponse() {
    *this = ::std::move(from);
  }

  inline SendResponse& operator=(const SendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendResponse& operator=(SendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendResponse* internal_default_instance() {
    return reinterpret_cast<const SendResponse*>(
               &_SendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendResponse& a, SendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendResponse& from) {
    SendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.shell.SendResponse";
  }
  protected:
  explicit SendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShellResultFieldNumber = 1,
  };
  // .mavsdk.rpc.shell.ShellResult shell_result = 1;
  bool has_shell_result() const;
  void clear_shell_result() ;
  const ::mavsdk::rpc::shell::ShellResult& shell_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::shell::ShellResult* release_shell_result();
  ::mavsdk::rpc::shell::ShellResult* mutable_shell_result();
  void set_allocated_shell_result(::mavsdk::rpc::shell::ShellResult* shell_result);
  private:
  const ::mavsdk::rpc::shell::ShellResult& _internal_shell_result() const;
  ::mavsdk::rpc::shell::ShellResult* _internal_mutable_shell_result();
  public:
  void unsafe_arena_set_allocated_shell_result(
      ::mavsdk::rpc::shell::ShellResult* shell_result);
  ::mavsdk::rpc::shell::ShellResult* unsafe_arena_release_shell_result();
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.SendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::shell::ShellResult* shell_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shell_2fshell_2eproto;
};// -------------------------------------------------------------------

class SubscribeReceiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.SubscribeReceiveRequest) */ {
 public:
  inline SubscribeReceiveRequest() : SubscribeReceiveRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeReceiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeReceiveRequest(const SubscribeReceiveRequest& from);
  SubscribeReceiveRequest(SubscribeReceiveRequest&& from) noexcept
    : SubscribeReceiveRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeReceiveRequest& operator=(const SubscribeReceiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeReceiveRequest& operator=(SubscribeReceiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeReceiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeReceiveRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeReceiveRequest*>(
               &_SubscribeReceiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeReceiveRequest& a, SubscribeReceiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeReceiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeReceiveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeReceiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeReceiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeReceiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeReceiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.shell.SubscribeReceiveRequest";
  }
  protected:
  explicit SubscribeReceiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.SubscribeReceiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_shell_2fshell_2eproto;
};// -------------------------------------------------------------------

class ReceiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.ReceiveResponse) */ {
 public:
  inline ReceiveResponse() : ReceiveResponse(nullptr) {}
  ~ReceiveResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReceiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveResponse(const ReceiveResponse& from);
  ReceiveResponse(ReceiveResponse&& from) noexcept
    : ReceiveResponse() {
    *this = ::std::move(from);
  }

  inline ReceiveResponse& operator=(const ReceiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveResponse& operator=(ReceiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveResponse* internal_default_instance() {
    return reinterpret_cast<const ReceiveResponse*>(
               &_ReceiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReceiveResponse& a, ReceiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveResponse& from) {
    ReceiveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.shell.ReceiveResponse";
  }
  protected:
  explicit ReceiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.ReceiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shell_2fshell_2eproto;
};// -------------------------------------------------------------------

class ShellResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.ShellResult) */ {
 public:
  inline ShellResult() : ShellResult(nullptr) {}
  ~ShellResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShellResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShellResult(const ShellResult& from);
  ShellResult(ShellResult&& from) noexcept
    : ShellResult() {
    *this = ::std::move(from);
  }

  inline ShellResult& operator=(const ShellResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellResult& operator=(ShellResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShellResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellResult* internal_default_instance() {
    return reinterpret_cast<const ShellResult*>(
               &_ShellResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShellResult& a, ShellResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShellResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShellResult& from) {
    ShellResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.shell.ShellResult";
  }
  protected:
  explicit ShellResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = ShellResult_Result;
  static constexpr Result RESULT_UNKNOWN = ShellResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = ShellResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM = ShellResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR = ShellResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_NO_RESPONSE = ShellResult_Result_RESULT_NO_RESPONSE;
  static constexpr Result RESULT_BUSY = ShellResult_Result_RESULT_BUSY;
  static inline bool Result_IsValid(int value) {
    return ShellResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = ShellResult_Result_Result_MIN;
  static constexpr Result Result_MAX = ShellResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = ShellResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
    return ShellResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return ShellResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return ShellResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* ptr);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.shell.ShellResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::shell::ShellResult_Result result() const;
  void set_result(::mavsdk::rpc::shell::ShellResult_Result value);

  private:
  ::mavsdk::rpc::shell::ShellResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::shell::ShellResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.ShellResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shell_2fshell_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SendRequest

// string command = 1;
inline void SendRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& SendRequest::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.SendRequest.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendRequest::set_command(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.command_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.SendRequest.command)
}
inline std::string* SendRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.SendRequest.command)
  return _s;
}
inline const std::string& SendRequest::_internal_command() const {
  return _impl_.command_.Get();
}
inline void SendRequest::_internal_set_command(const std::string& value) {
  ;


  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* SendRequest::_internal_mutable_command() {
  ;
  return _impl_.command_.Mutable( GetArenaForAllocation());
}
inline std::string* SendRequest::release_command() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.SendRequest.command)
  return _impl_.command_.Release();
}
inline void SendRequest::set_allocated_command(std::string* value) {
  _impl_.command_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.command_.IsDefault()) {
          _impl_.command_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.SendRequest.command)
}

// -------------------------------------------------------------------

// SendResponse

// .mavsdk.rpc.shell.ShellResult shell_result = 1;
inline bool SendResponse::has_shell_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shell_result_ != nullptr);
  return value;
}
inline void SendResponse::clear_shell_result() {
  if (_impl_.shell_result_ != nullptr) _impl_.shell_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::shell::ShellResult& SendResponse::_internal_shell_result() const {
  const ::mavsdk::rpc::shell::ShellResult* p = _impl_.shell_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::shell::ShellResult&>(
      ::mavsdk::rpc::shell::_ShellResult_default_instance_);
}
inline const ::mavsdk::rpc::shell::ShellResult& SendResponse::shell_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.SendResponse.shell_result)
  return _internal_shell_result();
}
inline void SendResponse::unsafe_arena_set_allocated_shell_result(
    ::mavsdk::rpc::shell::ShellResult* shell_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shell_result_);
  }
  _impl_.shell_result_ = shell_result;
  if (shell_result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.shell.SendResponse.shell_result)
}
inline ::mavsdk::rpc::shell::ShellResult* SendResponse::release_shell_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::shell::ShellResult* temp = _impl_.shell_result_;
  _impl_.shell_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::shell::ShellResult* SendResponse::unsafe_arena_release_shell_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.SendResponse.shell_result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::shell::ShellResult* temp = _impl_.shell_result_;
  _impl_.shell_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::shell::ShellResult* SendResponse::_internal_mutable_shell_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shell_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::shell::ShellResult>(GetArenaForAllocation());
    _impl_.shell_result_ = p;
  }
  return _impl_.shell_result_;
}
inline ::mavsdk::rpc::shell::ShellResult* SendResponse::mutable_shell_result() {
  ::mavsdk::rpc::shell::ShellResult* _msg = _internal_mutable_shell_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.SendResponse.shell_result)
  return _msg;
}
inline void SendResponse::set_allocated_shell_result(::mavsdk::rpc::shell::ShellResult* shell_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shell_result_;
  }
  if (shell_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shell_result);
    if (message_arena != submessage_arena) {
      shell_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shell_result_ = shell_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.SendResponse.shell_result)
}

// -------------------------------------------------------------------

// SubscribeReceiveRequest

// -------------------------------------------------------------------

// ReceiveResponse

// string data = 1;
inline void ReceiveResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ReceiveResponse::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ReceiveResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReceiveResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ReceiveResponse.data)
}
inline std::string* ReceiveResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.ReceiveResponse.data)
  return _s;
}
inline const std::string& ReceiveResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ReceiveResponse::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveResponse::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ReceiveResponse::release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.ReceiveResponse.data)
  return _impl_.data_.Release();
}
inline void ReceiveResponse::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.ReceiveResponse.data)
}

// -------------------------------------------------------------------

// ShellResult

// .mavsdk.rpc.shell.ShellResult.Result result = 1;
inline void ShellResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::shell::ShellResult_Result ShellResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellResult.result)
  return _internal_result();
}
inline void ShellResult::set_result(::mavsdk::rpc::shell::ShellResult_Result value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellResult.result)
}
inline ::mavsdk::rpc::shell::ShellResult_Result ShellResult::_internal_result() const {
  return static_cast<::mavsdk::rpc::shell::ShellResult_Result>(_impl_.result_);
}
inline void ShellResult::_internal_set_result(::mavsdk::rpc::shell::ShellResult_Result value) {
  ;
  _impl_.result_ = value;
}

// string result_str = 2;
inline void ShellResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& ShellResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShellResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellResult.result_str)
}
inline std::string* ShellResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.ShellResult.result_str)
  return _s;
}
inline const std::string& ShellResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void ShellResult::_internal_set_result_str(const std::string& value) {
  ;


  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ShellResult::_internal_mutable_result_str() {
  ;
  return _impl_.result_str_.Mutable( GetArenaForAllocation());
}
inline std::string* ShellResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.ShellResult.result_str)
  return _impl_.result_str_.Release();
}
inline void ShellResult::set_allocated_result_str(std::string* value) {
  _impl_.result_str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_str_.IsDefault()) {
          _impl_.result_str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.ShellResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::mavsdk::rpc::shell::ShellResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::shell::ShellResult_Result>() {
  return ::mavsdk::rpc::shell::ShellResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto_2epb_2eh
