// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tune/tune.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tune_2ftune_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tune_2ftune_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tune_2ftune_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tune_2ftune_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tune_2ftune_2eproto;
namespace mavsdk {
namespace rpc {
namespace tune {
class PlayTuneRequest;
struct PlayTuneRequestDefaultTypeInternal;
extern PlayTuneRequestDefaultTypeInternal _PlayTuneRequest_default_instance_;
class PlayTuneResponse;
struct PlayTuneResponseDefaultTypeInternal;
extern PlayTuneResponseDefaultTypeInternal _PlayTuneResponse_default_instance_;
class TuneDescription;
struct TuneDescriptionDefaultTypeInternal;
extern TuneDescriptionDefaultTypeInternal _TuneDescription_default_instance_;
class TuneResult;
struct TuneResultDefaultTypeInternal;
extern TuneResultDefaultTypeInternal _TuneResult_default_instance_;
}  // namespace tune
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template <>
::mavsdk::rpc::tune::PlayTuneRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::tune::PlayTuneRequest>(Arena*);
template <>
::mavsdk::rpc::tune::PlayTuneResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::tune::PlayTuneResponse>(Arena*);
template <>
::mavsdk::rpc::tune::TuneDescription* Arena::CreateMaybeMessage<::mavsdk::rpc::tune::TuneDescription>(Arena*);
template <>
::mavsdk::rpc::tune::TuneResult* Arena::CreateMaybeMessage<::mavsdk::rpc::tune::TuneResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mavsdk {
namespace rpc {
namespace tune {
enum TuneResult_Result : int {
  TuneResult_Result_RESULT_UNKNOWN = 0,
  TuneResult_Result_RESULT_SUCCESS = 1,
  TuneResult_Result_RESULT_INVALID_TEMPO = 2,
  TuneResult_Result_RESULT_TUNE_TOO_LONG = 3,
  TuneResult_Result_RESULT_ERROR = 4,
  TuneResult_Result_RESULT_NO_SYSTEM = 5,
  TuneResult_Result_TuneResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TuneResult_Result_TuneResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TuneResult_Result_IsValid(int value);
constexpr TuneResult_Result TuneResult_Result_Result_MIN = static_cast<TuneResult_Result>(0);
constexpr TuneResult_Result TuneResult_Result_Result_MAX = static_cast<TuneResult_Result>(5);
constexpr int TuneResult_Result_Result_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TuneResult_Result_descriptor();
template <typename T>
const std::string& TuneResult_Result_Name(T value) {
  static_assert(std::is_same<T, TuneResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return TuneResult_Result_Name(static_cast<TuneResult_Result>(value));
}
template <>
inline const std::string& TuneResult_Result_Name(TuneResult_Result value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TuneResult_Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool TuneResult_Result_Parse(absl::string_view name, TuneResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TuneResult_Result>(
      TuneResult_Result_descriptor(), name, value);
}
enum SongElement : int {
  SONG_ELEMENT_STYLE_LEGATO = 0,
  SONG_ELEMENT_STYLE_NORMAL = 1,
  SONG_ELEMENT_STYLE_STACCATO = 2,
  SONG_ELEMENT_DURATION_1 = 3,
  SONG_ELEMENT_DURATION_2 = 4,
  SONG_ELEMENT_DURATION_4 = 5,
  SONG_ELEMENT_DURATION_8 = 6,
  SONG_ELEMENT_DURATION_16 = 7,
  SONG_ELEMENT_DURATION_32 = 8,
  SONG_ELEMENT_NOTE_A = 9,
  SONG_ELEMENT_NOTE_B = 10,
  SONG_ELEMENT_NOTE_C = 11,
  SONG_ELEMENT_NOTE_D = 12,
  SONG_ELEMENT_NOTE_E = 13,
  SONG_ELEMENT_NOTE_F = 14,
  SONG_ELEMENT_NOTE_G = 15,
  SONG_ELEMENT_NOTE_PAUSE = 16,
  SONG_ELEMENT_SHARP = 17,
  SONG_ELEMENT_FLAT = 18,
  SONG_ELEMENT_OCTAVE_UP = 19,
  SONG_ELEMENT_OCTAVE_DOWN = 20,
  SongElement_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SongElement_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SongElement_IsValid(int value);
constexpr SongElement SongElement_MIN = static_cast<SongElement>(0);
constexpr SongElement SongElement_MAX = static_cast<SongElement>(20);
constexpr int SongElement_ARRAYSIZE = 20 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SongElement_descriptor();
template <typename T>
const std::string& SongElement_Name(T value) {
  static_assert(std::is_same<T, SongElement>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SongElement_Name().");
  return SongElement_Name(static_cast<SongElement>(value));
}
template <>
inline const std::string& SongElement_Name(SongElement value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SongElement_descriptor,
                                                 0, 20>(
      static_cast<int>(value));
}
inline bool SongElement_Parse(absl::string_view name, SongElement* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SongElement>(
      SongElement_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PlayTuneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tune.PlayTuneRequest) */ {
 public:
  inline PlayTuneRequest() : PlayTuneRequest(nullptr) {}
  ~PlayTuneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayTuneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayTuneRequest(const PlayTuneRequest& from);
  PlayTuneRequest(PlayTuneRequest&& from) noexcept
    : PlayTuneRequest() {
    *this = ::std::move(from);
  }

  inline PlayTuneRequest& operator=(const PlayTuneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayTuneRequest& operator=(PlayTuneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayTuneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayTuneRequest* internal_default_instance() {
    return reinterpret_cast<const PlayTuneRequest*>(
               &_PlayTuneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayTuneRequest& a, PlayTuneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayTuneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayTuneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayTuneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayTuneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayTuneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayTuneRequest& from) {
    PlayTuneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayTuneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.tune.PlayTuneRequest";
  }
  protected:
  explicit PlayTuneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuneDescriptionFieldNumber = 1,
  };
  // .mavsdk.rpc.tune.TuneDescription tune_description = 1;
  bool has_tune_description() const;
  void clear_tune_description() ;
  const ::mavsdk::rpc::tune::TuneDescription& tune_description() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::tune::TuneDescription* release_tune_description();
  ::mavsdk::rpc::tune::TuneDescription* mutable_tune_description();
  void set_allocated_tune_description(::mavsdk::rpc::tune::TuneDescription* tune_description);
  private:
  const ::mavsdk::rpc::tune::TuneDescription& _internal_tune_description() const;
  ::mavsdk::rpc::tune::TuneDescription* _internal_mutable_tune_description();
  public:
  void unsafe_arena_set_allocated_tune_description(
      ::mavsdk::rpc::tune::TuneDescription* tune_description);
  ::mavsdk::rpc::tune::TuneDescription* unsafe_arena_release_tune_description();
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tune.PlayTuneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::tune::TuneDescription* tune_description_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tune_2ftune_2eproto;
};// -------------------------------------------------------------------

class PlayTuneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tune.PlayTuneResponse) */ {
 public:
  inline PlayTuneResponse() : PlayTuneResponse(nullptr) {}
  ~PlayTuneResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayTuneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayTuneResponse(const PlayTuneResponse& from);
  PlayTuneResponse(PlayTuneResponse&& from) noexcept
    : PlayTuneResponse() {
    *this = ::std::move(from);
  }

  inline PlayTuneResponse& operator=(const PlayTuneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayTuneResponse& operator=(PlayTuneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayTuneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayTuneResponse* internal_default_instance() {
    return reinterpret_cast<const PlayTuneResponse*>(
               &_PlayTuneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayTuneResponse& a, PlayTuneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayTuneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayTuneResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayTuneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayTuneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayTuneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayTuneResponse& from) {
    PlayTuneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayTuneResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.tune.PlayTuneResponse";
  }
  protected:
  explicit PlayTuneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuneResultFieldNumber = 1,
  };
  // .mavsdk.rpc.tune.TuneResult tune_result = 1;
  bool has_tune_result() const;
  void clear_tune_result() ;
  const ::mavsdk::rpc::tune::TuneResult& tune_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::tune::TuneResult* release_tune_result();
  ::mavsdk::rpc::tune::TuneResult* mutable_tune_result();
  void set_allocated_tune_result(::mavsdk::rpc::tune::TuneResult* tune_result);
  private:
  const ::mavsdk::rpc::tune::TuneResult& _internal_tune_result() const;
  ::mavsdk::rpc::tune::TuneResult* _internal_mutable_tune_result();
  public:
  void unsafe_arena_set_allocated_tune_result(
      ::mavsdk::rpc::tune::TuneResult* tune_result);
  ::mavsdk::rpc::tune::TuneResult* unsafe_arena_release_tune_result();
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tune.PlayTuneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::tune::TuneResult* tune_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tune_2ftune_2eproto;
};// -------------------------------------------------------------------

class TuneDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tune.TuneDescription) */ {
 public:
  inline TuneDescription() : TuneDescription(nullptr) {}
  ~TuneDescription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TuneDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuneDescription(const TuneDescription& from);
  TuneDescription(TuneDescription&& from) noexcept
    : TuneDescription() {
    *this = ::std::move(from);
  }

  inline TuneDescription& operator=(const TuneDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuneDescription& operator=(TuneDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuneDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuneDescription* internal_default_instance() {
    return reinterpret_cast<const TuneDescription*>(
               &_TuneDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TuneDescription& a, TuneDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TuneDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuneDescription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuneDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuneDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuneDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuneDescription& from) {
    TuneDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuneDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.tune.TuneDescription";
  }
  protected:
  explicit TuneDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSongElementsFieldNumber = 1,
    kTempoFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.tune.SongElement song_elements = 1;
  int song_elements_size() const;
  private:
  int _internal_song_elements_size() const;

  public:
  void clear_song_elements() ;
  public:
  ::mavsdk::rpc::tune::SongElement song_elements(int index) const;
  void set_song_elements(int index, ::mavsdk::rpc::tune::SongElement value);
  void add_song_elements(::mavsdk::rpc::tune::SongElement value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& song_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_song_elements();

  private:
  ::mavsdk::rpc::tune::SongElement _internal_song_elements(int index) const;
  void _internal_add_song_elements(::mavsdk::rpc::tune::SongElement value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_song_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_song_elements();

  public:
  // int32 tempo = 2;
  void clear_tempo() ;
  ::int32_t tempo() const;
  void set_tempo(::int32_t value);

  private:
  ::int32_t _internal_tempo() const;
  void _internal_set_tempo(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tune.TuneDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> song_elements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _song_elements_cached_byte_size_;
    ::int32_t tempo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tune_2ftune_2eproto;
};// -------------------------------------------------------------------

class TuneResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.tune.TuneResult) */ {
 public:
  inline TuneResult() : TuneResult(nullptr) {}
  ~TuneResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TuneResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuneResult(const TuneResult& from);
  TuneResult(TuneResult&& from) noexcept
    : TuneResult() {
    *this = ::std::move(from);
  }

  inline TuneResult& operator=(const TuneResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuneResult& operator=(TuneResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuneResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuneResult* internal_default_instance() {
    return reinterpret_cast<const TuneResult*>(
               &_TuneResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TuneResult& a, TuneResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TuneResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuneResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuneResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuneResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuneResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuneResult& from) {
    TuneResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuneResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.tune.TuneResult";
  }
  protected:
  explicit TuneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = TuneResult_Result;
  static constexpr Result RESULT_UNKNOWN = TuneResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = TuneResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_INVALID_TEMPO = TuneResult_Result_RESULT_INVALID_TEMPO;
  static constexpr Result RESULT_TUNE_TOO_LONG = TuneResult_Result_RESULT_TUNE_TOO_LONG;
  static constexpr Result RESULT_ERROR = TuneResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_NO_SYSTEM = TuneResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return TuneResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = TuneResult_Result_Result_MIN;
  static constexpr Result Result_MAX = TuneResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = TuneResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
    return TuneResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return TuneResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return TuneResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* ptr);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.tune.TuneResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::tune::TuneResult_Result result() const;
  void set_result(::mavsdk::rpc::tune::TuneResult_Result value);

  private:
  ::mavsdk::rpc::tune::TuneResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::tune::TuneResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.tune.TuneResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tune_2ftune_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlayTuneRequest

// .mavsdk.rpc.tune.TuneDescription tune_description = 1;
inline bool PlayTuneRequest::has_tune_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tune_description_ != nullptr);
  return value;
}
inline void PlayTuneRequest::clear_tune_description() {
  if (_impl_.tune_description_ != nullptr) _impl_.tune_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::tune::TuneDescription& PlayTuneRequest::_internal_tune_description() const {
  const ::mavsdk::rpc::tune::TuneDescription* p = _impl_.tune_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::tune::TuneDescription&>(
      ::mavsdk::rpc::tune::_TuneDescription_default_instance_);
}
inline const ::mavsdk::rpc::tune::TuneDescription& PlayTuneRequest::tune_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.PlayTuneRequest.tune_description)
  return _internal_tune_description();
}
inline void PlayTuneRequest::unsafe_arena_set_allocated_tune_description(
    ::mavsdk::rpc::tune::TuneDescription* tune_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tune_description_);
  }
  _impl_.tune_description_ = tune_description;
  if (tune_description) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tune.PlayTuneRequest.tune_description)
}
inline ::mavsdk::rpc::tune::TuneDescription* PlayTuneRequest::release_tune_description() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::tune::TuneDescription* temp = _impl_.tune_description_;
  _impl_.tune_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::tune::TuneDescription* PlayTuneRequest::unsafe_arena_release_tune_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tune.PlayTuneRequest.tune_description)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::tune::TuneDescription* temp = _impl_.tune_description_;
  _impl_.tune_description_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tune::TuneDescription* PlayTuneRequest::_internal_mutable_tune_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tune_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tune::TuneDescription>(GetArenaForAllocation());
    _impl_.tune_description_ = p;
  }
  return _impl_.tune_description_;
}
inline ::mavsdk::rpc::tune::TuneDescription* PlayTuneRequest::mutable_tune_description() {
  ::mavsdk::rpc::tune::TuneDescription* _msg = _internal_mutable_tune_description();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tune.PlayTuneRequest.tune_description)
  return _msg;
}
inline void PlayTuneRequest::set_allocated_tune_description(::mavsdk::rpc::tune::TuneDescription* tune_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tune_description_;
  }
  if (tune_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tune_description);
    if (message_arena != submessage_arena) {
      tune_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tune_description, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tune_description_ = tune_description;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tune.PlayTuneRequest.tune_description)
}

// -------------------------------------------------------------------

// PlayTuneResponse

// .mavsdk.rpc.tune.TuneResult tune_result = 1;
inline bool PlayTuneResponse::has_tune_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tune_result_ != nullptr);
  return value;
}
inline void PlayTuneResponse::clear_tune_result() {
  if (_impl_.tune_result_ != nullptr) _impl_.tune_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::tune::TuneResult& PlayTuneResponse::_internal_tune_result() const {
  const ::mavsdk::rpc::tune::TuneResult* p = _impl_.tune_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::tune::TuneResult&>(
      ::mavsdk::rpc::tune::_TuneResult_default_instance_);
}
inline const ::mavsdk::rpc::tune::TuneResult& PlayTuneResponse::tune_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.PlayTuneResponse.tune_result)
  return _internal_tune_result();
}
inline void PlayTuneResponse::unsafe_arena_set_allocated_tune_result(
    ::mavsdk::rpc::tune::TuneResult* tune_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tune_result_);
  }
  _impl_.tune_result_ = tune_result;
  if (tune_result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.tune.PlayTuneResponse.tune_result)
}
inline ::mavsdk::rpc::tune::TuneResult* PlayTuneResponse::release_tune_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::tune::TuneResult* temp = _impl_.tune_result_;
  _impl_.tune_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::tune::TuneResult* PlayTuneResponse::unsafe_arena_release_tune_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tune.PlayTuneResponse.tune_result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::tune::TuneResult* temp = _impl_.tune_result_;
  _impl_.tune_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::tune::TuneResult* PlayTuneResponse::_internal_mutable_tune_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tune_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::tune::TuneResult>(GetArenaForAllocation());
    _impl_.tune_result_ = p;
  }
  return _impl_.tune_result_;
}
inline ::mavsdk::rpc::tune::TuneResult* PlayTuneResponse::mutable_tune_result() {
  ::mavsdk::rpc::tune::TuneResult* _msg = _internal_mutable_tune_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tune.PlayTuneResponse.tune_result)
  return _msg;
}
inline void PlayTuneResponse::set_allocated_tune_result(::mavsdk::rpc::tune::TuneResult* tune_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tune_result_;
  }
  if (tune_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tune_result);
    if (message_arena != submessage_arena) {
      tune_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tune_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tune_result_ = tune_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tune.PlayTuneResponse.tune_result)
}

// -------------------------------------------------------------------

// TuneDescription

// repeated .mavsdk.rpc.tune.SongElement song_elements = 1;
inline int TuneDescription::_internal_song_elements_size() const {
  return _impl_.song_elements_.size();
}
inline int TuneDescription::song_elements_size() const {
  return _internal_song_elements_size();
}
inline void TuneDescription::clear_song_elements() {
  _internal_mutable_song_elements()->Clear();
}
inline ::mavsdk::rpc::tune::SongElement TuneDescription::song_elements(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.TuneDescription.song_elements)
  return _internal_song_elements(index);
}
inline void TuneDescription::set_song_elements(int index, ::mavsdk::rpc::tune::SongElement value) {
  _internal_mutable_song_elements()->Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tune.TuneDescription.song_elements)
}
inline void TuneDescription::add_song_elements(::mavsdk::rpc::tune::SongElement value) {
  _internal_add_song_elements(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.tune.TuneDescription.song_elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& TuneDescription::song_elements() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.tune.TuneDescription.song_elements)
  return _internal_song_elements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* TuneDescription::mutable_song_elements() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.tune.TuneDescription.song_elements)
  return _internal_mutable_song_elements();
}
inline ::mavsdk::rpc::tune::SongElement TuneDescription::_internal_song_elements(int index) const {
  return static_cast<::mavsdk::rpc::tune::SongElement>(_internal_song_elements().Get(index));
}
inline void TuneDescription::_internal_add_song_elements(::mavsdk::rpc::tune::SongElement value) {
  _internal_mutable_song_elements()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& TuneDescription::_internal_song_elements() const {
  return _impl_.song_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* TuneDescription::_internal_mutable_song_elements() {
  return &_impl_.song_elements_;
}

// int32 tempo = 2;
inline void TuneDescription::clear_tempo() {
  _impl_.tempo_ = 0;
}
inline ::int32_t TuneDescription::tempo() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.TuneDescription.tempo)
  return _internal_tempo();
}
inline void TuneDescription::set_tempo(::int32_t value) {
  _internal_set_tempo(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tune.TuneDescription.tempo)
}
inline ::int32_t TuneDescription::_internal_tempo() const {
  return _impl_.tempo_;
}
inline void TuneDescription::_internal_set_tempo(::int32_t value) {
  ;
  _impl_.tempo_ = value;
}

// -------------------------------------------------------------------

// TuneResult

// .mavsdk.rpc.tune.TuneResult.Result result = 1;
inline void TuneResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::tune::TuneResult_Result TuneResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.TuneResult.result)
  return _internal_result();
}
inline void TuneResult::set_result(::mavsdk::rpc::tune::TuneResult_Result value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tune.TuneResult.result)
}
inline ::mavsdk::rpc::tune::TuneResult_Result TuneResult::_internal_result() const {
  return static_cast<::mavsdk::rpc::tune::TuneResult_Result>(_impl_.result_);
}
inline void TuneResult::_internal_set_result(::mavsdk::rpc::tune::TuneResult_Result value) {
  ;
  _impl_.result_ = value;
}

// string result_str = 2;
inline void TuneResult::clear_result_str() {
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& TuneResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.tune.TuneResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TuneResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.tune.TuneResult.result_str)
}
inline std::string* TuneResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.tune.TuneResult.result_str)
  return _s;
}
inline const std::string& TuneResult::_internal_result_str() const {
  return _impl_.result_str_.Get();
}
inline void TuneResult::_internal_set_result_str(const std::string& value) {
  ;


  _impl_.result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* TuneResult::_internal_mutable_result_str() {
  ;
  return _impl_.result_str_.Mutable( GetArenaForAllocation());
}
inline std::string* TuneResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.tune.TuneResult.result_str)
  return _impl_.result_str_.Release();
}
inline void TuneResult::set_allocated_result_str(std::string* value) {
  _impl_.result_str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_str_.IsDefault()) {
          _impl_.result_str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.tune.TuneResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tune
}  // namespace rpc
}  // namespace mavsdk


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::mavsdk::rpc::tune::TuneResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::tune::TuneResult_Result>() {
  return ::mavsdk::rpc::tune::TuneResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::tune::SongElement> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::tune::SongElement>() {
  return ::mavsdk::rpc::tune::SongElement_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tune_2ftune_2eproto_2epb_2eh
